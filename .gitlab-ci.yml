# My deployer image to be ran for stage job
image: vietduy0509/deployer:latest

variables:
  SERVICE_PATH: /recipes
  HOST: abc.xyz
  GIT_UBMODULE_STRATEGY: recursive
  GIT_STRATEGY: clone
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  SECRET_KEY: <a random character string>
  FLASK_CONFIG: development
  DATABASE_URL: postgresql://postgres:postgres@recipes-db.ckcejaos8w8c.ap-southeast-1.rds.amazonaws.com:5432/recipe_db
  DOCKER_DRIVER: overlay

# Before Script for every job
.before_script: &before_script |
  export IMAGE_TAG=$CI_COMMIT_SHORT_SHA
  mkdir ~/.ssh
  echo "$GITLAB_RUNNER_PRIVATE_KEY" > ~/.ssh/id_rsa
  chmod 600 ~/.ssh/id_rsa
  ssh-keyscan gitlab.com >> ~/.ssh/known_hosts

  function docker-build() {
    aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 334687143702.dkr.ecr.ap-southeast-1.amazonaws.com/recipes
    docker build -t 334687143702.dkr.ecr.ap-southeast-1.amazonaws.com/$CI_PROJECT_NAME:$IMAGE_TAG .
    docker push 334687143702.dkr.ecr.ap-southeast-1.amazonaws.com/$CI_PROJECT_NAME:$IMAGE_TAG
  }

before_script:
  - *before_script

stages:
  - build
  - deploy

# Build docker image
build image:
  stage: build
  tags:
    - wecycle-runner
  script: |
    docker-build

# Deploy deployment to EC2 instance with docker-compose
deploy recipes ec2:
  when: manual
  stage: deploy
  tags:
    - wecycle-runner
  script:
    - envsubst < docker-compose.tpl.yml > docker-compose.yml
    - docker-compose up -d
    - docker image prune -f

# Deploy deployment to EKS cluster
deploy recipes eks:
  when: manual
  stage: deploy
  tags:
    - wecycle-runner
  variables:
    NAMESPACE: default
  script: |
    aws eks --region ap-southeast-1 update-kubeconfig --name basic-cluster
    cd k8s && bash deploy.sh

# Dont mind the runner name, I re-use the runner of my previous project
# You can use the same stage with another tool, I just re-use gitlab-ci cuz I already had my AWS account connected to my Gitlab account